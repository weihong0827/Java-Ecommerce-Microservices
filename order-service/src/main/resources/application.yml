#server:
#  port: 9004
#
#spring:
#  application:
#    name: order-service
#  cloud:
#    # service discovery address
#    nacos:
#      discovery:
#        server-addr: ${NACOS_HOST}:8848
#
#  # Database Configuration
#  datasource:
#    driver-class-name: org.postgresql.Driver
##    url: jdbc:postgresql://localhost:5432/Order?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
##    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:${DATABASE_SCHEME}://${DATABASE_HOST}:${DATABASE_PORT}/Order?serverTimezone=UTC  # JDBC URL for MySQL
#    username: ${DATABASE_USERNAME}
#    password: ${DATABASE_PASSWORD}
#
#  redis:
#    host: ${REDIS_HOST}
#    port: ${REDIS_PORT}
#    password: ${REDIS_PASSWORD}
#  rabbitmq:
#    host: ${RABBITMQ_HOST}
#    port: 5672
#    virtual-host: /
#    password: ${RABBITMQ_PASSWORD}
#    username: ${RABBITMQ_USER}
#    listener:
#      simple:
#        acknowledge-mode: manual
#
#
#
## Configure MyBatis-Plus to print SQL logs
#mybatis-plus:
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#
#
## Set log level, ERROR/WARN/INFO/DEBUG, default is to show only INFO and above
#
#logging:
#  level:
#    root: INFO
#
#mqconfig:
#  # delay queue
#  order_close_delay_queue: order.close.delay.queue
#
#  #close queue
#  order_close_queue: order.close.queue
#
#  # Exchange
#  order_event_exchange: order.event.exchange
#
#  #key to enter the delay queue
#  order_close_delay_routing_key: order.close.delay.routing.key
#
#  #key to enter the close queue
#  order_close_routing_key: order.close.routing.key
#
#  #time the message expires in ms
#  ttl: 300000
#seata:
#  tx-service-group: ${spring.application.name}-group
#  service:
#    grouplist:
#      ecommerce: ${SEATA_HOST}:8091
#    vgroup-mapping:
#      order-service-group: ecommerce
#
#alipay:
#  success_return_url: https://weihong.tech
#  callback_url: http://liberal-sole-urgently.ngrok-free.app/api/order/v1/callback/alipay
#
